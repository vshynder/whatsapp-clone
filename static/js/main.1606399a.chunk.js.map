{"version":3,"sources":["hooks/useLocalStorage.js","components/Login.js","context/ContactsProvider.js","context/SocketProvider.js","context/ConversationsProvider.js","components/Conversations.js","components/Contacts.js","components/NewConversationModal.js","components/NewContactModal.js","components/Sidebar.js","components/OpenConversation.js","components/Dashboard.js","components/App.js","index.js"],"names":["useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","Login","onIdSubmit","idRef","useRef","Container","className","style","height","Form","onSubmit","e","preventDefault","current","Group","Label","Control","type","ref","required","Button","onClick","uuidV4","variant","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","query","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conv","a","b","length","sort","every","el","index","messages","on","off","formattedConversations","conversation","recipient","contact","find","message","fromMe","senderName","selected","selectedConversations","sendMessage","emit","selectConversationIndex","createConversation","Conversations","ListGroup","Item","action","active","join","Contacts","NewConversationModal","closeModal","selectedContacts","setSelectedContacts","Modal","Header","closeButton","Body","controlId","Check","rype","includes","label","onChange","contactId","prevSelectedContacts","filter","prevId","NewContactModal","nameRef","Sidebar","activeKey","setActiveKey","modalOpen","setModalOpen","conversationsOpen","width","Tab","onSelect","Nav","Link","eventKey","Content","Pane","show","onHide","OpenConversation","setText","setRef","node","scrollIntoView","smooth","lastMessage","r","InputGroup","as","target","resize","Append","Dashboard","App","setId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1606399a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst PREFIX = \"whatsapp-clone-\";\n\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key;\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey);\n    if (jsonValue != null) return JSON.parse(jsonValue);\n    if (typeof initialValue === \"function\") {\n      return initialValue();\n    } else {\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\n  }, [prefixedKey, value]);\n\n  return [value, setValue];\n}\n","import React, { useRef } from \"react\";\nimport { Container, Form, Button } from \"react-bootstrap\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nexport default function Login({ onIdSubmit }) {\n  const idRef = useRef();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    onIdSubmit(idRef.current.value);\n  };\n\n  const createNewId = () => {\n    onIdSubmit(uuidV4());\n  };\n\n  return (\n    <Container\n      className=\"align-items-center d-flex\"\n      style={{ height: \"100vh\" }}\n    >\n      <Form onSubmit={handleSubmit} className=\"w-100\">\n        <Form.Group>\n          <Form.Label>Enter Your Id</Form.Label>\n          <Form.Control type=\"text\" ref={idRef} required />\n        </Form.Group>\n        <Button className=\"mr-2\" type=\"submit\">\n          Login\n        </Button>\n        <Button onClick={createNewId} variant=\"secondary\">\n          Create a new ID\n        </Button>\n      </Form>\n    </Container>\n  );\n}\n","import React, { useContext } from \"react\";\n\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nconst ContactsContext = React.createContext();\n\nexport function useContacts() {\n  return useContext(ContactsContext);\n}\n\nexport function ContactsProvider({ children }) {\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\n\n  const createContact = (id, name) => {\n    setContacts((prevContacts) => {\n      return [...prevContacts, { id, name }];\n    });\n  };\n\n  return (\n    <ContactsContext.Provider value={{ contacts, createContact }}>\n      {children}\n    </ContactsContext.Provider>\n  );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\n\nconst SocketContext = React.createContext();\n\nexport function useSocket() {\n  return useContext(SocketContext);\n}\n\nexport function SocketProvider({ id, children }) {\n  const [socket, setSocket] = useState();\n\n  useEffect(() => {\n    const newSocket = io(\"https://mysterious-sea-91181.herokuapp.com/\", {\n      query: { id },\n    });\n    setSocket(newSocket);\n\n    return () => newSocket.close();\n  }, [id]);\n\n  return (\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\n  );\n}\n","import React, { useContext, useState, useEffect, useCallback } from \"react\";\n\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { useSocket } from \"./SocketProvider\";\n\nconst ConversationsContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage(\n    \"conversations\",\n    []\n  );\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const { contacts } = useContacts();\n  const socket = useSocket();\n\n  const createConversation = (recipients) => {\n    setConversations((prevConversations) => {\n      return [...prevConversations, { recipients, messages: [] }];\n    });\n  };\n\n  const addMessageToConversation = useCallback(\n    ({ recipients, text, sender }) => {\n      setConversations((prevConversations) => {\n        let madeChange = false;\n        const newMessage = { sender, text };\n\n        const newConversations = prevConversations.map((conv) => {\n          if (arrayEquality(conv.recipients, recipients)) {\n            madeChange = true;\n            return { ...conv, messages: [...conv.messages, newMessage] };\n          }\n        });\n\n        if (madeChange) {\n          return newConversations;\n        } else {\n          return [...prevConversations, { recipients, messages: [newMessage] }];\n        }\n      });\n    },\n    [setConversations]\n  );\n\n  useEffect(() => {\n    if (socket == null) return;\n\n    socket.on(\"recieve-message\", addMessageToConversation);\n\n    return () => socket.off(\"recieve-message\");\n  }, [socket, addMessageToConversation]);\n\n  const sendMessage = (recipients, text) => {\n    socket.emit(\"send-message\", { recipients, text });\n\n    addMessageToConversation({ recipients, text, sender: id });\n  };\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map((recipient) => {\n      const contact = contacts.find((contact) => contact.id === recipient);\n      const name = (contact && contact.name) || recipient;\n      return { id: recipient, name };\n    });\n\n    const messages = conversation.messages.map((message) => {\n      const contact = contacts.find((contact) => contact.id === message.sender);\n      const name = (contact && contact.name) || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message, senderName: name, fromMe };\n    });\n\n    const selected = index === selectedConversationIndex;\n\n    return { ...conversation, messages, recipients, selected };\n  });\n\n  return (\n    <ConversationsContext.Provider\n      value={{\n        conversations: formattedConversations,\n        selectedConversations:\n          formattedConversations[selectedConversationIndex],\n        sendMessage,\n        selectConversationIndex: setSelectedConversationIndex,\n        createConversation,\n      }}\n    >\n      {children}\n    </ConversationsContext.Provider>\n  );\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n\n  a.sort();\n  b.sort();\n  return a.every((el, index) => {\n    return el === b[index];\n  });\n}\n","import React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { useConversations } from \"../context/ConversationsProvider\";\n\nexport default function Conversations() {\n  const { conversations, selectConversationIndex } = useConversations();\n\n  return (\n    <ListGroup variant=\"flush\">\n      {conversations.map((conversation, index) => (\n        <ListGroup.Item\n          key={index}\n          action\n          onClick={() => selectConversationIndex(index)}\n          active={conversation.selected}\n        >\n          {conversation.recipients\n            .map((recipient) => recipient.name)\n            .join(\", \")}\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n}\n","import React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\n\nimport { useContacts } from \"../context/ContactsProvider\";\n\nexport default function Contacts() {\n  const { contacts } = useContacts();\n\n  return (\n    <ListGroup variant=\"flush\">\n      {contacts.map((contact) => (\n        <ListGroup.Item key={contact.id}>{contact.name}</ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\nimport { useContacts } from \"../context/ContactsProvider\";\nimport { useConversations } from \"../context/ConversationsProvider\";\n\nexport default function NewConversationModal({ closeModal }) {\n  const [selectedContacts, setSelectedContacts] = useState([]);\n\n  const { contacts } = useContacts();\n  const { createConversation } = useConversations();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    createConversation(selectedContacts);\n    closeModal();\n  };\n\n  const handleCheckboxCheck = (contactId) => {\n    setSelectedContacts((prevSelectedContacts) => {\n      if (prevSelectedContacts.includes(contactId)) {\n        return prevSelectedContacts.filter((prevId) => contactId !== prevId);\n      } else {\n        return [...prevSelectedContacts, contactId];\n      }\n    });\n  };\n\n  return (\n    <>\n      <Modal.Header closeButton>Create conversation</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          {contacts.map((contact) => (\n            <Form.Group controlId={contact.id} key={contact.id}>\n              <Form.Check\n                rype=\"checkbox\"\n                value={selectedContacts.includes(contact.id)}\n                label={contact.name}\n                onChange={() => handleCheckboxCheck(contact.id)}\n              />\n            </Form.Group>\n          ))}\n          <Button type=\"submit\">Create</Button>\n        </Form>\n      </Modal.Body>\n    </>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\n\nimport { useContacts } from \"../context/ContactsProvider\";\n\nexport default function NewContactModal({ closeModal }) {\n  const idRef = useRef();\n  const nameRef = useRef();\n  const { createContact } = useContacts();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    createContact(idRef.current.value, nameRef.current.value);\n    closeModal();\n  };\n\n  return (\n    <>\n      <Modal.Header closeButton>Create contact</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>Id</Form.Label>\n            <Form.Control type=\"text\" ref={idRef} required />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" ref={nameRef} required />\n          </Form.Group>\n          <Button type=\"submit\">Create</Button>\n        </Form>\n      </Modal.Body>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { Tab, Nav, Button, Modal } from \"react-bootstrap\";\n\nimport Conversations from \"./Conversations\";\nimport Contacts from \"./Contacts\";\nimport NewConversationModal from \"./NewConversationModal\";\nimport NewContactModal from \"./NewContactModal\";\n\nconst CONVERSATIONS_KEY = \"conversations\";\nconst CONTACTS_KEY = \"contacts\";\n\nexport default function Sidebar({ id }) {\n  const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY);\n  const [modalOpen, setModalOpen] = useState(false);\n  const conversationsOpen = activeKey === CONVERSATIONS_KEY;\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <div style={{ width: \"250px\" }} className=\"d-flex flex-column\">\n      <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\n        <Nav variant=\"tabs\" className=\"justify-contect-center\">\n          <Nav.Item>\n            <Nav.Link eventKey={CONVERSATIONS_KEY}>Conversations</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey={CONTACTS_KEY}>Contacts</Nav.Link>\n          </Nav.Item>\n        </Nav>\n        <Tab.Content className=\"border-right overflow-auto flex-grow-1\">\n          <Tab.Pane eventKey={CONVERSATIONS_KEY}>\n            <Conversations />\n          </Tab.Pane>\n          <Tab.Pane eventKey={CONTACTS_KEY}>\n            <Contacts />\n          </Tab.Pane>\n        </Tab.Content>\n        <div className=\"p-2 border-top border-right small\">\n          Your Id: <span className=\"text-muted\">{id}</span>\n        </div>\n        <Button onClick={() => setModalOpen(true)} className=\"rounded-0\">\n          New {conversationsOpen ? \"Conversation\" : \"Contact\"}\n        </Button>\n      </Tab.Container>\n\n      <Modal show={modalOpen} onHide={closeModal}>\n        {conversationsOpen ? (\n          <NewConversationModal closeModal={closeModal} />\n        ) : (\n          <NewContactModal closeModal={closeModal} />\n        )}\n      </Modal>\n    </div>\n  );\n}\n","import React, { useState, useCallback } from \"react\";\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\nimport { useConversations } from \"../context/ConversationsProvider\";\n\nexport default function OpenConversation() {\n  const [text, setText] = useState();\n  const setRef = useCallback((node) => {\n    if (node) {\n      node.scrollIntoView({ smooth: true });\n    }\n  }, []);\n  const { sendMessage, selectedConversations } = useConversations();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    sendMessage(\n      selectedConversations.recipients.map((r) => r.id),\n      text\n    );\n    setText(\"\");\n  };\n\n  return (\n    <div className=\"d-flex flex-column flex-grow-1\">\n      <div className=\"flex-grow-1 overflow-auto\">\n        <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\n          {selectedConversations.messages.map((message, index) => {\n            const lastMessage =\n              selectedConversations.messages.length - 1 === index;\n            return (\n              <div\n                ref={lastMessage ? setRef : null}\n                key={index}\n                className={`my-1 d-flex flex-column ${\n                  message.fromMe\n                    ? \"align-self-end align-items-end\"\n                    : \"align-items-start\"\n                }`}\n              >\n                <div\n                  className={`rounded px-2 py-1 ${\n                    message.fromMe ? \"bg-primary text-white\" : \"border\"\n                  }`}\n                >\n                  {message.text}\n                </div>\n                <div\n                  className={`text-muted small ${\n                    message.fromMe ? \"text-right\" : \"\"\n                  }`}\n                >\n                  {message.fromMe ? \"You\" : message.senderName}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group className=\"m-2\">\n          <InputGroup>\n            <Form.Control\n              as=\"textarea\"\n              required\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n              style={{ height: \"75px\", resize: \"none\" }}\n            />\n            <InputGroup.Append>\n              <Button type=\"submit\">Send</Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n      </Form>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Sidebar from \"./Sidebar\";\nimport OpenConversation from \"./OpenConversation\";\n\nimport { useConversations } from \"../context/ConversationsProvider\";\n\nexport default function Dashboard({ id }) {\n  const { selectedConversations } = useConversations();\n\n  return (\n    <div className=\"d-flex\" style={{ height: \"100vh\" }}>\n      <Sidebar id={id} />\n      {selectedConversations && <OpenConversation />}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nimport Login from \"./Login\";\nimport Dashboard from \"./Dashboard\";\n\nimport { ContactsProvider } from \"../context/ContactsProvider\";\nimport { ConversationsProvider } from \"../context/ConversationsProvider\";\nimport { SocketProvider } from \"../context/SocketProvider\";\n\nfunction App() {\n  const [id, setId] = useLocalStorage(\"id\");\n\n  const dashboard = (\n    <SocketProvider id={id}>\n      <ContactsProvider>\n        <ConversationsProvider id={id}>\n          <Dashboard id={id} />\n        </ConversationsProvider>\n      </ContactsProvider>\n    </SocketProvider>\n  );\n\n  return id ? dashboard : <Login onIdSubmit={setId} />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}